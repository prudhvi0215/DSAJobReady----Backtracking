class Solution {
public:
    
    void subsetHelper(vector<int> &nums,int index,vector<int> result,vector<vector<int>> &finalResult)
    {
        //Base case
        if(index==nums.size()){
            finalResult.push_back(result);
            return;
        }
        
        vector<int> result1 = result;
        vector<int> result2 = result;
        
        result1.push_back(nums[index]);
        
        subsetHelper(nums,index+1,result1,finalResult);
        subsetHelper(nums,index+1,result2,finalResult);
        
        return;
    }
    
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> finalResult;
        vector<int> result;
        
        subsetHelper(nums,0,result,finalResult);
        
        return finalResult;
    }
};
     
     (OR)

#include <vector>

void printSubsetHelper(vector<int> nums,vector<int> &Output)
{
    //Base case
    if(nums.size()==0){
        for(int i=0;i<Output.size();i++){
            cout<<Output[i]<<" ";
        }
        cout<<"\n";
        
        return;
    }
    
    vector<int> Output1 = Output;
    vector<int> Output2 = Output;
    
    Output1.push_back(nums[0]);
    
    nums.erase(nums.begin()+0);
    
    printSubsetHelper(nums,Output1);
    printSubsetHelper(nums,Output2);
    
    return;
}



void printSubsetsOfArray(int input[], int size) {
	// Write your code here
    
    vector<int> nums;
    
    for(int i=0;i<size;i++){
        nums.push_back(input[i]);
    }
    
    vector<int> Output;
    
    printSubsetHelper(nums,Output);
    
    return;
}



