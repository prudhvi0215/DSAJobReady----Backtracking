Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
 

Constraints:

1 <= n <= 8





CODE:



class Solution {
public:
    
    void generateParenthesisHelper(int n,int open,int close,string str,vector<string> &ans)
    {
        if(open==n && close==n)
        {
            ans.push_back(str);
            return;
        }
        
        if(open<n){
            generateParenthesisHelper(n,open+1,close,str+"(",ans);
        }
        
        if(close<open){
            generateParenthesisHelper(n,open,close+1,str+")",ans);
        }
        
        return;
    }
    
    
    vector<string> generateParenthesis(int n) {
        
        vector<string> ans;
        
        generateParenthesisHelper(n,0,0,"",ans);
    
        return ans;
    }
};
