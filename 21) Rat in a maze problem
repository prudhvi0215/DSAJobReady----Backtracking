class Solution{
    public:
    
    bool validPoint(int x,int y,int n){
        return (x>=0 && x<n && y>=0 && y<n);
    }
    
    void findPathHelper(vector<vector<int>> &maze,int n,string path,int X,int Y,int prevX,int prevY,vector<string> &ans,vector<vector<bool>> &visited)
    {
        visited[X][Y] = true;
        
        if(X==n-1 && Y==n-1){
            ans.push_back(path);
            return;
        }
        
        int dx[] = {1,0,0,-1};
        int dy[] = {0,-1,1,0};
        
        string direction="";
        
        for(int i=0;i<4;i++)
        {
            if(i==0){
                direction='D';
            }else if(i==1){
                direction='L';
            }else if(i==2){
                direction='R';
            }else{
                direction='U';
            }
            
            int newX = X + dx[i];
            int newY = Y + dy[i];
            
            if(newX==prevX && newY == prevY){
                continue;
            }
            
            if(validPoint(newX,newY,n) && maze[newX][newY]==1 && !visited[newX][newY]){
                findPathHelper(maze,n,path+direction,newX,newY,X,Y,ans,visited);
                visited[newX][newY] = false;  //Backtrack
            }
        }
        
        return;
    }
    
    
    vector<string> findPath(vector<vector<int>> &maze, int n) {
        // Your code goes here
    
        vector<string> ans;
        
        if(maze[0][0]==0 || maze[n-1][n-1]==0){
            return ans;
        }
        
        vector<vector<bool>> visited(n,vector<bool>(n,false));
    
        
        findPathHelper(maze,n,"",0,0,-1,-1,ans,visited);
        
        return ans;
    }
};
