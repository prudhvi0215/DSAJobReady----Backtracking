class Solution {
public:
    
    
    void permuteHelper(vector<int> &nums,vector<int> &path, vector<bool> &visited,vector<vector<int>> &result)
    {
        if(path.size()==nums.size()){
            result.push_back(path);
            return;
        }
        
        for(int i=0;i<nums.size();i++){
            
            if(!visited[i]) {
                path.push_back(nums[i]);
                visited[i] = true;
                
                permuteHelper(nums,path,visited,result);
                
                visited[i] = false;   // Backtrack
                path.pop_back();     //Backtrack
            }
            
        }
        
        return;
    }
    

    vector<vector<int>> permute(vector<int>& nums) {
        
        vector<vector<int>> result;
        vector<int> path;
        
        vector<bool> visited(nums.size(),false);
        
        if(nums.size()==0) {
            return result;
        }
        
        
        permuteHelper(nums,path,visited,result);
        
        return result;
    }

};
